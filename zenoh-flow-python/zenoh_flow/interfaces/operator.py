#
# Copyright (c) 2022 ZettaScale Technology
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors:
#   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
#

from zenoh_flow.types import Context, InputToken, LocalDeadlineMiss, DataMessage
from typing import Dict, Optional, Any

class Operator(object):

    def input_rule(self, context: Context, state : Any, tokens: Dict[str, InputToken]) -> bool:
        """
            The input_rule method is called by the zenoh flow runtime.
            This method is called when data is received on one or more inputs.
            This result of this method is used as discriminant to trigger the
            run function.
            Any operator has to implement this method.

            :param context: The operator context
            :type context: :class:`Context`
            :param state: The source state
            :type state: any
            :param tokens: Tokens received from inputs
            :type tokens: dict{str,:class:`InputToken`}

            :rtype: bool
        """

        raise NotImplementedError("Please implement your own method, Operator is an interface")

    def output_rule(self, context: Context, state : Any, outputs : Dict[str, bytes] , deadline_miss: Optional[LocalDeadlineMiss] = None) -> Dict[str, bytes]:
        """
            The output_rule method is called by the zenoh flow runtime.
            This method is called when data is produced from the run.
            Any operator has to implement this method.

            :param context: The operator context
            :type context: :class:`Context`
            :param state: The source state
            :type state: any
            :param outputs: The outputs generated by the run.
            :type outputs: :class:`Outputs`
            :param deadline_miss: Local deadline miss
            :type deadline_miss: :class:`LocalDeadlineMiss`

            :rtype: :class:`Outputs`
        """
        raise NotImplementedError("Please implement your own method, Operator is an interface")

    def run(self, context: Context, state : Any, inputs: Dict[str, DataMessage]) -> Dict[str, bytes]:
        """
            The run method is called by the zenoh flow runtime.
            This method is called when the result of input_rule is true.
            This result of this method is used as the `outputs` parameter for the
            output_rule function.
            Any operator has to implement this method.

            :param context: The operator context
            :type context: :class:`Context`
            :param state: The source state
            :type state: any
            :param inputs: Input data received from the inputs
            :type inputs: :class:`Inputs`

            :rtype: dict{str, bytes}
        """
        raise NotImplementedError("Please implement your own method, Operator is an interface")

    def initialize(self, configuration: Dict[str, Any]) -> Any:
        """
            The initialize method is called by the zenoh flow runtime.
            This method is called when starting the data flow graph.
            Any operator has to implement this method.
            This method is use to initialize any state that can be useful
            for the operator (e.g. configuration parameters)
            It should then return the state to the runtime.

            :param configuration: Configuration
            :type configuraion: dict

            :rtype: any
        """
        raise NotImplementedError("Please implement your own method, Operator is an interface")

    def finalize(self, state : Any) -> None:
        """
            The finalize method is called by the zenoh flow runtime.
            This method is called when stopping the data flow graph.
            Any operator has to implement this method.
            This method is use to finalize any state that can be useful
            for the operator (e.g. configuration)
            It should destroy the state.

            :param state: Operator state
            :type state: any
        """
        raise NotImplementedError("Please implement your own method, Operator is an interface")